"use strict";

import { expect } from "chai";
import { blobFromBase64 } from "../../../../src/core/functions/misc.js";

let encodedData;
before(() => {
    encodedData = "";
});

describe("blobToBase64", () => {
    it("should create a Blob from base64 data with the correct size and type", async () => {
        const blob = blobFromBase64(encodedData);
        expect(blob).to.be.instanceOf(Blob);
        expect(blob).to.have.property("size", 6002);
        expect(blob).to.have.property("type", "image/jpeg");
    });
});